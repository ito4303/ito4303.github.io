[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rをはじめよう",
    "section": "",
    "text": "はじめに\nRは、統計分析向けに開発されたプログラミング言語です。といっても、単なるプログラミング言語というだけではなく、統計分析やグラフ作成のための環境でもあります。SASなどの効果なソフトウェアとは違って、無償で使用することができます。また、オープンソースソフトウェアですので、内部でどのような処理をしているのか確認したり、必要に応じて改造したりすることもできます。\nRでは、コマンドを手で入力して、スクリプトを作成していく作業が基本となります。そのため、最初は少し取っつきにくいかもしれません。しかし、一度スクリプトを作成しておけば、別のデータに対して再利用したり、設定を変えて再実行したりすることが簡単にできます。慣れてしまえば便利に使えると思います。どうしてもコマンドの入力になじめないという方には、グラフィカルユーザーインターフェイス(GUI)環境もあります。こちらは基本的にマウス操作でRを使うことができます。ただ、GUI環境を使う際も、再利用性や再現可能性のためスクリプトを保存しておくことをお勧めします。このとき、スクリプトでどのような処理をおこなっているかがわかるということも大事ですので、やはりRのスクリプトが読めることが大切になります。\nまた、Rを使う際には、RStudioという統合開発環境（IDE）を利用すると便利です。RStudioも無償で利用できるオープンソースソフトウェアです（有償版もあります）。RStudioは、Rスクリプトの作成、保存、実行のほか、グラフの描画などもできます。R以外にも、PythonやStanなどのスクリプトも書けますので、このようなほかの言語を組み合わせて使うこともできます。\nこの本では、RとRStudioのインストールから、基本的な使い方までを説明します。",
    "crumbs": [
      "はじめに"
    ]
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "1  RとRStudioのインストール（Windows & Mac）",
    "section": "",
    "text": "1.1 Rのインストール\nまずはRをインストールするところから始めます。それから、RStudioもインストールします。\nなお、この記事の作成でインストールしたバージョンは、Rが4.5.0、RStudioが2025.05+496です。インストール先のOSのバージョンは、WindowsがWindows 11 23H2、MacがmacOS Sequoia 15.5 (Apple Silicon) です。\nRのインストーラーはCRAN（「しーらん」または「くらん」）からダウンロードできます（図 1.1）。CRANは世界各地にミラーがあり、日本では山形大学に置かれています（https://ftp.yz.yamagata-u.ac.jp/pub/cran/）。このほか、 クラウドに置かれているものも利用できます（https://cloud.r-project.org）。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>RとRStudioのインストール（Windows & Mac）</span>"
    ]
  },
  {
    "objectID": "install.html#rのインストール",
    "href": "install.html#rのインストール",
    "title": "1  RとRStudioのインストール（Windows & Mac）",
    "section": "",
    "text": "図 1.1: 各種OS向けのRダウンロードページ\n\n\n\n\n1.1.1 WindowsでのRのインストール\nWindowsでRをインストールするには、手動でインストーラーをダウンロードしてインストールする方法と、パッケージマネージャーのwingetを使用してインストールする方法があります。\n\n1.1.1.1 インストーラーのダウンロード\nCRANのRダウンロードページ（図 1.1） の“Download R for Windows”のリンク先へ移動します。次の画面（ 図 1.2）で、baseを選択します。\n\n\n\n\n\n\n図 1.2: Windows版Rのダウンロード物の選択画面（R本体はbaseを選択）\n\n\n\n次の画面（図 1.3）でインストーラーをダウンロードします（“4.5.0”のところはバージョンによって変わります）。\n\n\n\n\n\n\n図 1.3: Windows版Rインストーラーのダウンロード画面\n\n\n\n\n\n1.1.1.2 インストール\nダウンロードできたらインストーラーを起動します。\n起動すると、「このアプリにがデバイスに変更を加えることを許可しますか?」と尋ねられますので、「はい」を押します（図 1.4）。\n\n\n\n\n\n\n図 1.4: Rインストーラー起動時のユーザーアカウント制御ウィンドウ\n\n\n\nつづいて、「セットアップに使用する言語の選択」（ 図 1.5）となります。「日本語」がデフォルトになっていますので、そのまま「OK」を押します。\n\n\n\n\n\n\n図 1.5: セットアップに使用する言語の選択\n\n\n\nその次はライセンスの承認です（ 図 1.6）。「GPLv2」というライセンスです。通常は問題ないでしょうから「次へ」を押します。\n\n\n\n\n\n\n図 1.6: ライセンスのウィンドウ\n\n\n\nさらにその次は、インストール先の指定です（ 図 1.7）。以前はCドライブ直下にしたほうがよいという話もありましたが、現在はそのままで問題ないようです。\n\n\n\n\n\n\n図 1.7: 「インストール先の指定」ウィンドウ\n\n\n\nひきつづきコンポーネントの選択です（ 図 1.8）。通常はデフォルトのままでよいでしょう。\n\n\n\n\n\n\n図 1.8: 「コンポーネントの選択」ウィンドウ\n\n\n\nその次は起動時オプションです（ 図 1.9）。これもデフォルトのままでよいでしょう。\n\n\n\n\n\n\n図 1.9: 「起動時オプション」のウィンドウ\n\n\n\n最後に追加タスクの選択です（ 図 1.10）。デフォルトでもよいですが、デスクトップにアイコンが不要という方は、一番上のチェックを外しましょう。\n\n\n\n\n\n\n図 1.10: 「追加タスクの選択」のウィンドウ\n\n\n\nここまでくるとインストールが開始されます。しばらくすると完了します（ 図 1.11）。おつかれさまでした。\n\n\n\n\n\n\n図 1.11: セットアップウィザードの完了のウィンドウ\n\n\n\n\n\n1.1.1.3 wingetでのインストール\nwingetはWindows純正のパッケージマネージャーです。コマンド入力操作が必要になりますが、これを使ってRをインストールすることも可能です。\nwingetを使ってRをインストールするには、PowerShellなどで以下のコマンドを打ち込んでください。\nwinget install -e --id RProject.R\nこれだけで、Rのインストーラーのダウンロードと、インストールをやってくれます。\n\n\n\n1.1.2 MacでのRのインストール\nMacでRをインストールするには、手動でインストーラーをダウンロードしてインストールする方法と、パッケージマネージャーのHomebrewを使用してインストールする方法があります。\n\n1.1.2.1 インストーラーのダウンロード\nCRANのRダウンロードページ（図 1.1）の“Download R for macOS”のリンク先へ移動します。移動先の画面（図 1.12）で、お使いのマシンのCPUにあわせてamd64版(Apple Silicon)か、x86版(Intel)を選択します。\n\n\n\n\n\n\n図 1.12\n\n\n\n\n\n1.1.2.2 インストール\nダウンロードできたら、インストーラーを起動します。ここではApple Silicon版をインストールしていますが、Intel版でも同様です。起動したら、まず最初のウィンドウ（図 1.13）で「続ける」を押します。\n\n\n\n\n\n\n図 1.13: Mac版インストーラー起動後のウィンドウ\n\n\n\nすると「大切な情報」としてインストールされるパッケージの説明が表示されます（図 1.14）。確認したら「続ける」を押します。\n\n\n\n\n\n\n図 1.14: 「大切な情報」のウィンドウ\n\n\n\n次に、使用許諾契約（ライセンス）が表示されます。ライセンスは「GPLv2」です。通常は問題がないでしょうからそのまま「続ける」を押します。\n\n\n\n\n\n\n図 1.15: ライセンスのウィンドウ\n\n\n\nそうすると、確認のダイアログがでますので（図 1.16）、「同意する」を押します。\n\n\n\n\n\n\n図 1.16: ライセンス確認ダイアログ\n\n\n\nその次は、「標準インストール」か「カスタムインストール」かの選択です。デフォルトでは「標準インストール」（図 1.17）ですので、通常はこのまま「インストール」ボタンを押してよいでしょう。\n\n\n\n\n\n\n図 1.17: 「標準インストール」のウィンドウ\n\n\n\n「インストール」ではなく、「カスタマイズ」ボタンを押すと 図 1.18 の画面になります。よくわからないようならとりあえずこのまま「インストール」ボタンを押してよいでしょう。\n\n\n\n\n\n\n図 1.18: 「カスタムインストール」のウィンドウ\n\n\n\n「インストール」ボタンを押すとインストールが始まり、やがて完了画面となります（図 1.19）。「閉じる」ボタンを押すと、インストーラーをゴミ箱に入れるか尋ねられますが、お好きなほうを選んでください。これでインストールは終了です。\n\n\n\n\n\n\n図 1.19: Rのインストール完了ウィンドウ\n\n\n\n\n\n\n1.1.3 Homebrewでのインストール\nHomebrewはmacOS向けのパッケージマネージャーです。コマンド入力操作が必要になりますが、これを使ってRをインストールすることも可能です。\nHomebrew自体がインストール済みでしたら、ターミナルで以下のコマンドを打ち込んでください。\nbrew install --cask r\nすると、Rインストーラーのダウンロードとインストールまでやってくれます。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>RとRStudioのインストール（Windows & Mac）</span>"
    ]
  },
  {
    "objectID": "install.html#rstudioのインストール",
    "href": "install.html#rstudioのインストール",
    "title": "1  RとRStudioのインストール（Windows & Mac）",
    "section": "1.2 RStudioのインストール",
    "text": "1.2 RStudioのインストール\nRStudioにはサーバー向けのRStudio Serverもありますが、ここではRStudio Desktopをインストールします。\n\n1.2.1 WindowsでのRStudioのインストール\n\n1.2.1.1 インストーラーからインストール\nRStudio Desktopのインストーラーをダウンロードして、起動します。\n「このアプリがデバイスに変更を加えることを許可しますか?」と尋ねられますので（図 1.20）、「はい」を押します。\n\n\n\n\n\n\n図 1.20: Windows版RStudioインストーラーを起動したときの、ユーザーアカウント制御のウィンドウ\n\n\n\nするとセットアップが始まります（図 1.21）。「次へ」ボタンを押して、進みましょう。\n\n\n\n\n\n\n図 1.21: セットアップ開始のウィンドウ\n\n\n\n続いて、インストール先の選択になります（図 1.22）。ここもそのまま「インストール」ボタンを押してよいでしょう。\n\n\n\n\n\n\n図 1.22: 「インストール先の選択」のウィンドウ\n\n\n\nそうするとインストールがはじまります。しばらくするとインストールが完了します（図 1.23）。\n\n\n\n\n\n\n図 1.23: インストール完了のウィンドウ\n\n\n\n起動時に、使用するRを選択するウィンドウが出た場合は（図 1.24）、適切なものを選択します。通常は“64-bit version”でしょうから、そうなっているようでしたら、そのまま「OK」を押します。\n複数のバージョンのRがインストールされているようでしたら、使用したいバージョンを選択します。\n\n\n\n\n\n\n図 1.24: RStudioで使用するRの選択\n\n\n\n\n\n1.2.1.2 wingetでのインストール\nあるいはwingetを使って、以下のコマンドでインストールできます。\nwinget install -e --id Posit.RStudio\n\n\n\n1.2.2 MacでのRStudioのインストール\n\n1.2.2.1 インストーラーからインストール\nダウンロードしたインストーラーのディスクイメージを開きます。開いたウィンドウ（図 1.25）で、 RStudioのアイコンをドラッグして、Applicationsフォルダ（のエイリアス）にドロップしてください。これでインストール完了です。\n\n\n\n\n\n\n図 1.25\n\n\n\n\n\n1.2.2.2 Homebrewでのインストール\nあるいは、Homebrewでは以下のコマンドでインストールできます。\nbrew install --cask rstudio",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>RとRStudioのインストール（Windows & Mac）</span>"
    ]
  },
  {
    "objectID": "rstudio.html",
    "href": "rstudio.html",
    "title": "2  RStudioの基本操作",
    "section": "",
    "text": "2.1 設定\nRStudioの設定は、メニューの Tools &gt; Global Options… を選択して、現れたウィンドウでおこないます（図 2.1）。\n設定項目はたくさんありますが、まずはPackagesのPrimary CRAN repository: で、主に使用するCRANリポジトリを設定しておくとよいでしょう。Change…ボタンを押すとCRAN Mirrors:の選択肢が現れます（図 2.2）。日本からですと、“Japan (Yonezawa) [https] - Yamagata University”か、“Global (CDN) - RStudio”がよいと思われます。\nまたGeneral の Graphics タブで、Graphics DeviceのBackendに”AGG”を設定しておくとグラフの文字化けが少なくなります（図 2.3）。なお、この後、Rでraggパッケージのインストールを求められる場合があります。\nその他たくさんの設定項目がありますが、お好みまたは必要に応じて、だんだんと設定していけばよいでしょう。\n一部の設定項目は、次節で説明するプロジェクトごとに設定することも可能です。こちらは、Tools &gt; Project Options… で設定します。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudioの基本操作</span>"
    ]
  },
  {
    "objectID": "rstudio.html#設定",
    "href": "rstudio.html#設定",
    "title": "2  RStudioの基本操作",
    "section": "",
    "text": "図 2.1: RStudioのGlobal Options設定ウィンドウ\n\n\n\n\n\n\n\n\n\n\n図 2.2: RStudioのCRAN Mirrorsの設定\n\n\n\n\n\n\n\n\n\n\n図 2.3: RStudioのGraphics Deviceの設定",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudioの基本操作</span>"
    ]
  },
  {
    "objectID": "rstudio.html#プロジェクト",
    "href": "rstudio.html#プロジェクト",
    "title": "2  RStudioの基本操作",
    "section": "2.2 プロジェクト",
    "text": "2.2 プロジェクト\nプロジェクトは、RStudioで作業をおこなうときの基本単位です。\n\n2.2.1 新規プロジェクトの作成\nメニューから、File &gt; New Project… と選択します。すると新規プロジェクト作成ウィザード（図 2.4）が現れます。\nここで、まっさらなところからプロジェクトをつくるなら、“New Directory”を選択します。既存のディレクトリにすでに何らかのファイルが用意されているようなら、“Existing Directory”を選択します。また、GitHubなどのレポジトリからプロジェクトをチェックアウトする場合には、“Version Control”を選択します。\nここでは”New Directory”で進めます。\n\n\n\n\n\n\n図 2.4: RStudioの新規プロジェクト作成ウィザード\n\n\n\nつづいて、プロジェクトタイプの選択になります（図 2.5）。通常は”New Project”でよいでしょう。\n\n\n\n\n\n\n図 2.5: プロジェクトタイプの選択\n\n\n\nそうすると、新規プロジェクトの保存先の指定（図 2.6）になります。 “Directory name:” のところには、プロジェクトのディレクトリ名を入力します。また、“Browse…”ボタンでプロジェクトのディレクトリを保存する（上位）ディレクトリを指定します。\n最後に”Create Project”ボタンを押すと、新規プロジェクトの作成が完了します。\n\n\n\n\n\n\n図 2.6: 新規プロジェクトの保存先の指定",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudioの基本操作</span>"
    ]
  },
  {
    "objectID": "rstudio.html#ファイルの作成",
    "href": "rstudio.html#ファイルの作成",
    "title": "2  RStudioの基本操作",
    "section": "2.3 ファイルの作成",
    "text": "2.3 ファイルの作成\nでは新しくRスクリプトのファイルを作成しましょう。メニューで、File &gt; New File &gt; R Script と選択します。すると、ウィンドウの左上にエディタが出現します（図 2.7）。このエディタでRスクリプトを作成します。\n\n\n\n\n\n\n図 2.7: R Studioの新規プロジェクトで新しいRスクリプトを作成したところ（Mac版）\n\n\n\n作成しているRスクリプトを保存するには、メニューから File &gt; Save と選択します。まだ保存したことのないスクリプトでしたら、ファイル保存のダイアログが出てきますので、プロジェクトのディレクトリ内に保存します。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudioの基本操作</span>"
    ]
  },
  {
    "objectID": "r_basic.html",
    "href": "r_basic.html",
    "title": "3  Rの基本操作",
    "section": "",
    "text": "3.1 基本演算\n加減乗除は、それぞれ”+ - * /“の演算子でできます。\nRStudioではコンソールに直接コマンドを打ち込んでReturnキーを押すか、あるいは新規のスクリプトファイルを開いて、そこにコマンドを入力してから同じ行でCtrl+Returnを押します。\n背景に色が付いているところが打ち込むコマンド、その下がコマンドを入力した結果になります。\n1 + 2\n\n[1] 3\n結果の先頭についている”[1]“はとりあえず気にしなくて構いません。\n3 - 4\n\n[1] -1\n5 * 6\n\n[1] 30\n7 / 8\n\n[1] 0.875\nべき乗の演算子は、“^”です。\n2^3\n\n[1] 8\n“%/%”は整数除算、“%%”は剰余です。\n9 %/% 2\n\n[1] 4\n9 %% 2\n\n[1] 1",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Rの基本操作</span>"
    ]
  },
  {
    "objectID": "r_basic.html#変数",
    "href": "r_basic.html#変数",
    "title": "3  Rの基本操作",
    "section": "3.2 変数",
    "text": "3.2 変数\n“&lt;-”または”=“で、変数に値を代入できます。Rでは、変数はとくに宣言や型の指定は必要ありません。\n\na &lt;- 1 + 2\n\nこちらでも同じです。\n\na = 1 + 2\n\n変数名そのままで値が表示されます。\n\na\n\n[1] 3\n\n\nprint()関数で、明示的に変数の値を表示させることもできます。\n\nprint(a)\n\n[1] 3",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Rの基本操作</span>"
    ]
  },
  {
    "objectID": "r_basic.html#ベクトル行列因子などのデータ構造",
    "href": "r_basic.html#ベクトル行列因子などのデータ構造",
    "title": "3  Rの基本操作",
    "section": "3.3 ベクトル・行列・因子などのデータ構造",
    "text": "3.3 ベクトル・行列・因子などのデータ構造\n\n3.3.1 ベクトル（vector）\nRでは、ベクトル（vector）はc()関数で作成できます。Rのベクトルは、数学的なベクトルのみならず、数列なども含みます。\n\nc(1.2, 2.3, 3.4, 4.5)\n\n[1] 1.2 2.3 3.4 4.5\n\n\n“:”（コロン）は連続した数値（差が1または-1）からなるベクトルを生成する演算子です。\n\n1:50\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n[23] 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\n[45] 45 46 47 48 49 50\n\n\nここで、[23]とか[45]とあるのは、ここからそれぞれ23番目と45番目の要素を表示するということをしめしています。\nダブルクォーテーション(\")で文字を囲むと文字型になります。\n\n\"abc\"\n\n[1] \"abc\"\n\n\n文字のベクトルもつくれます。\n\nc(\"abc\", \"def\", \"ghi\")\n\n[1] \"abc\" \"def\" \"ghi\"\n\n\n\n3.3.1.1 ベクトルの要素へのアクセス\nベクトルの要素を取り出すには、“[]”を使用します。以下の例では、ベクトルaの2番目の要素を取り出します。Rの添え字は1から始まることに注意してください。\n\na &lt;- c(3, 4, 5, 6, 2, 3, 4)\na[2]\n\n[1] 4\n\n\n以下の例では、3番目から5番目までの要素を取り出します。\n\na[3:5]\n\n[1] 5 6 2\n\n\n以下の例では、1番目と3番目の要素を取り出します。\n\na[c(1, 3)]\n\n[1] 3 5\n\n\n以下の例では、1番目と2番目以外の要素を取り出します。\n\na[-c(1, 2)]\n\n[1] 5 6 2 3 4\n\n\n\n\n\n3.3.2 行列（matrix）\n行列（matrix）は、matrix()関数で作成します。以下の例では、1から6までの数値を2行3列の行列にしています。\n\nX &lt;- matrix(1:6, nrow = 2, ncol = 3)\nprint(X)\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\nデフォルトでは、列優先で要素が並びます。行優先にしたい場合は、matrix()関数の引数でbyrow = TRUEを指定します。\n\nmatrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n行列の要素を取り出すには、ベクトルと同様に”[]“を使います。以下の例では、1行2列目の要素を取り出しています。\n\nX[1, 2]\n\n[1] 3\n\n\n行が先、列が後になることに注意してください。\n\n3.3.2.1 行列演算\n行列の演算もできます。まずは加算です。\n\nA &lt;- matrix(1:6, nrow = 2, ncol = 3)\nA\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n当然ながら、行と列が一致していないとエラーになります。\n\nB &lt;- matrix(6:1, nrow = 2, ncol = 3)\nB\n\n     [,1] [,2] [,3]\n[1,]    6    4    2\n[2,]    5    3    1\n\n\n\nA + B\n\n     [,1] [,2] [,3]\n[1,]    7    7    7\n[2,]    7    7    7\n\n\n減算です。\n\nB - A\n\n     [,1] [,2] [,3]\n[1,]    5    1   -3\n[2,]    3   -1   -5\n\n\n行列の転値には”t()“関数を用います。\n\nC &lt;- t(B)\nC\n\n     [,1] [,2]\n[1,]    6    5\n[2,]    4    3\n[3,]    2    1\n\n\n乗算です。行列の乗法演算子は”%*%“です。\n\nA %*% C\n\n     [,1] [,2]\n[1,]   28   19\n[2,]   40   28\n\n\n演算子の左側の行列の列数と、右側の行列の行数が一致していないとエラーになります。\n\nC %*% A\n\n     [,1] [,2] [,3]\n[1,]   16   38   60\n[2,]   10   24   38\n[3,]    4   10   16\n\n\n“*”は要素ごとの乗算になります。\n\nA * B\n\n     [,1] [,2] [,3]\n[1,]    6   12   10\n[2,]   10   12    6\n\n\n\n\n\n3.3.3 因子（factor）\n因子(factor)は、ベクトルに似ていますが、要素となるもの（水準）が決まっているデータ構造です。factor()関数で作成できます。\n\nfactor(c(\"リンゴ\", \"ミカン\", \"ブドウ\", \"イチゴ\", \"リンゴ\"))\n\n[1] リンゴ ミカン ブドウ イチゴ リンゴ\nLevels: イチゴ ブドウ ミカン リンゴ\n\n\n結果で”Levels”と表示されるのが水準です。\n\n3.3.3.1 変数の尺度\n因子は名義尺度に対応するものです。名義尺度とは、名前だけのデータで、値に大小関係がないものです。たとえば、果物の名前は、イチゴ・ブドウ・ミカン・リンゴなどのように、名前だけであって、数値的な大小関係はありません。\nこれがたとえば、“非常に悪い”・“悪い”・“普通”・“良い”・“非常に良い”などのように、順序がある場合は、順序尺度と呼ばれます。順序尺度の変数はRではordered関数で作成できます。levels引数で水準と順序を指定します。\n\nA &lt;- ordered(c(\"良い\", \"悪い\", \"普通\", \"良い\", \"非常に良い\"),\n             levels = c(\"非常に悪い\", \"悪い\", \"普通\", \"良い\", \"非常に良い\"))\nprint(A)\n\n[1] 良い       悪い       普通       良い       非常に良い\nLevels: 非常に悪い &lt; 悪い &lt; 普通 &lt; 良い &lt; 非常に良い\n\n\nこれは、factor()関数で、ordered = TRUEを指定しても同様です。\n\nA &lt;- factor(c(\"良い\", \"悪い\", \"普通\", \"良い\", \"非常に良い\"),\n            levels = c(\"非常に悪い\", \"悪い\", \"普通\", \"良い\", \"非常に良い\"),\n            ordered = TRUE)\nprint(A)\n\n[1] 良い       悪い       普通       良い       非常に良い\nLevels: 非常に悪い &lt; 悪い &lt; 普通 &lt; 良い &lt; 非常に良い\n\n\n大小関係があるので、比較ができます。以下では、A[1]が”良い”、A[2]が”悪い”なので、A[1] &gt; A[2]は真になります。TRUE/FALSEの論理型についてはあとで説明します（セクション 3.4）。\n\nA[1] &gt; A[2]\n\n[1] TRUE\n\n\nそのほかの変数尺度には、間隔尺度と比例尺度があります。間隔尺度は、数値の変数で、大小関係はありますが、0にはとくに意味がないものです。例えば、摂氏の温度では、0度は氷点ですが物理的には0というわけではありません（絶対零度とは違います）。そのため摂氏10度は摂氏5度の2倍というわけではありません。\n比例尺度は、0に意味があるもので、長さや質量などが該当します。これらの0は物理的に0であり、また、たとえば、10cmは5cmの2倍ということができます。\n間隔尺度も比例尺度も、Rでは数値で表現されます。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Rの基本操作</span>"
    ]
  },
  {
    "objectID": "r_basic.html#sec-data-type",
    "href": "r_basic.html#sec-data-type",
    "title": "3  Rの基本操作",
    "section": "3.4 Rにおける基本のデータ型",
    "text": "3.4 Rにおける基本のデータ型\nRの基本のデータ型は、論理型（logical）、整数型（integer）、倍精度小数点型（double）、文字型（character）の4つです。実際にはもっとほかの型もありますが、リスト型(list)以外はユーザーレベルではあまり使わないでしょう。リスト型は後で説明します。\n論理型は真偽値に対応するもので、TRUE（真）またはFALSE（偽）の値だけをとります。下の例では、“==”が「等しい」の比較演算子なので、結果はTRUEになります。\n\n1 == 1\n\n[1] TRUE\n\n\n以下の例では、1は2よりも大きくないので、結果はFALSEになります。\n\n1 &gt; 2\n\n[1] FALSE\n\n\ntypeof()関数で型を調べることができます。\n\ntypeof(1 &gt; 2)\n\n[1] \"logical\"\n\n\n整数型と倍精度小数点型はいずれも数値です。明示的に整数型を指定するときは数字の後に”L”をつけます。\n\ntypeof(3L)\n\n[1] \"integer\"\n\n\nそうしないと倍精度小数点型になる場合があります。\n\ntypeof(3)\n\n[1] \"double\"\n\n\n文字型では以下のようになります。\n\ntypeof(\"ABC\")\n\n[1] \"character\"\n\n\nベクトルや行列、因子などは、このようなデータ型を要素として持つデータ構造（クラス）となります。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Rの基本操作</span>"
    ]
  },
  {
    "objectID": "r_basic.html#リストとデータフレーム",
    "href": "r_basic.html#リストとデータフレーム",
    "title": "3  Rの基本操作",
    "section": "3.5 リストとデータフレーム",
    "text": "3.5 リストとデータフレーム\n\n3.5.1 リスト（list）\nリストは、異なる型の要素を持つことができるデータ型です。list()関数で作成します。以下の例では、1番目の要素に論理型、2番目の要素に数値ベクトル、3番目の要素に文字ベクトルを持つリストを作成しています。\n\nlist(TRUE, 1:3, c(\"A\", \"B\", \"C\", \"D\"))\n\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] 1 2 3\n\n[[3]]\n[1] \"A\" \"B\" \"C\" \"D\"\n\n\n要素には名前を付けることもできます。\n\nL &lt;- list(a = TRUE, b = 1:3, c = c(\"A\", \"B\", \"C\", \"D\"))\nprint(L)\n\n$a\n[1] TRUE\n\n$b\n[1] 1 2 3\n\n$c\n[1] \"A\" \"B\" \"C\" \"D\"\n\n\nリストの要素を取り出すには”[[ ]]“を使います。以下の例ではリストLの2番目の要素を取り出しています。\n\nL[[2]]\n\n[1] 1 2 3\n\n\n要素に名前がついているリストの場合は名前を使うこともできます。\n\nL[[\"b\"]]\n\n[1] 1 2 3\n\n\nこれは”$“を使ってより簡単に書けます。\n\nL$b\n\n[1] 1 2 3\n\n\n\n\n3.5.2 データフレーム（data frame）\nデータフレーム（data frame）はリストの1種ですが、要素の長さがすべて同じで、行列や表のようになっているのが特徴です。各要素が列（変数）となり、行が観測に対応します。リストですので、要素の型は異なっていてもかまいません。\nデータフレームは、Rの統計計算では、もっともよく使われる基本的なデータ構造です。\n以下の例では、名前・年齢・身長を変数として、4人分のデータからなるデータフレームを作成しています。データフレームは、data.frame()関数で作成します。\n\ndf &lt;- data.frame(name = c(\"山田\", \"佐藤\", \"鈴木\", \"田中\"),\n                 age = c(25, 27, 30, 33),\n                 height = c(170, 160, 175, 165))\nprint(df)\n\n  name age height\n1 山田  25    170\n2 佐藤  27    160\n3 鈴木  30    175\n4 田中  33    165\n\n\n\n3.5.2.1 データフレームの要素へのアクセス\nリストと同様の記法で、各列を取り出すことができます。\n1番目の要素（列）を取り出します。\n\ndf[[1]]\n\n[1] \"山田\" \"佐藤\" \"鈴木\" \"田中\"\n\n\n以下のようにも書けます。\n\ndf$name\n\n[1] \"山田\" \"佐藤\" \"鈴木\" \"田中\"\n\n\n取り出されたものはベクトルになっていますので、さらにその中の要素を取り出すこともできます。\n\ndf$name[2]\n\n[1] \"佐藤\"\n\n\nあるいは、行列のように行と列を指定することもできます。行の指定の方が先ということに注意してください。\n\ndf[2, 1]\n\n[1] \"佐藤\"\n\n\n2行目だけを取り出すなら、以下のように書きます。\n\ndf[2, ]\n\n  name age height\n2 佐藤  27    160\n\n\n以下のように書くと、1〜2列目を取り出すことができます。\n\ndf[, 1:2]\n\n  name age\n1 山田  25\n2 佐藤  27\n3 鈴木  30\n4 田中  33",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Rの基本操作</span>"
    ]
  },
  {
    "objectID": "r_basic.html#関数の呼び出しとヘルプの利用",
    "href": "r_basic.html#関数の呼び出しとヘルプの利用",
    "title": "3  Rの基本操作",
    "section": "3.6 関数の呼び出しとヘルプの利用",
    "text": "3.6 関数の呼び出しとヘルプの利用\nこれまでにも関数をいくつか利用してきましたが、ここであらためて関数の呼び出し方法について説明しましょう。基本的には、関数名(引数名1 = 値, 引数名2 = 値,...)という形で関数を呼び出します。\n\nX &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)\n\n関数にどのような引数があるのかは、help()関数で調べることができます。\n\nhelp(matrix)\n\nこれは、以下のようにしても同様です。\n\n?matrix\n\nRStudioではヘルプのタブにヘルプが表示されます。Usageのところに以下の説明が出ます。\nmatrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,\n       dimnames = NULL)\nその下のArgumentsに引数の詳細な説明があります。matrix()では、\n\ndataは、行列にするデータのベクトルで、デフォルト値はNA（欠損値）\nnrowは行の数でデフォルト値は1\nncolが列の数でデフォルト値は1\nbyrowが行優先にするかどうかで、デフォルト値はFALSE（しない）\ndimnamesが行と列につける名前で、デフォルト値はNULL（空）\n\nとなっています。\nこの説明のとおり、matrix()関数ですべての引数を省略してデフォルト値で行列を作成すると以下のようになります。\n\nmatrix()\n\n     [,1]\n[1,]   NA\n\n\nRの関数呼び出しでは、定義された順番どおりなら引数名を省略できます。以下はmatrix(data = 1:6, nrow = 2, ncol = 3, byrow = TRUE)と同じです。\n\nmatrix(1:6, 2, 3, TRUE)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n引数名は区別がつくところまで省略することもできます。また、引数名をつければ順番を入れ替えることもできます。\n\nmatrix(by = TRUE, nc = 3, nr = 2, dat = 1:6)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\nただ、あまりやりすぎるとわかりにくくなります。最初の1つ目あるいは2つ目までの引数は順番で指定して、あまり使われないような引数は完全な引数名を指定することが推奨されています。今回の場合では以下のようになるでしょうか（nrowとncolも省略してよいかもしれません）。\n\nmatrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Rの基本操作</span>"
    ]
  },
  {
    "objectID": "r_basic.html#パッケージの利用",
    "href": "r_basic.html#パッケージの利用",
    "title": "3  Rの基本操作",
    "section": "3.7 パッケージの利用",
    "text": "3.7 パッケージの利用\n統計解析にRを使用することの利点のひとつは、豊富なパッケージを利用できることです。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Rの基本操作</span>"
    ]
  },
  {
    "objectID": "r_basic.html#パッケージとは",
    "href": "r_basic.html#パッケージとは",
    "title": "3  Rの基本操作",
    "section": "3.8 パッケージとは",
    "text": "3.8 パッケージとは\nパッケージとは、R本体にはない解析手法や、グラフィック環境、データなどをひとまとまりにまとめて扱えるようにしたものです。パッケージは、ユーザーが自分で作成して公開することもできます。そのため、非常にたくさんのパッケージを利用することができます。\n\n3.8.1 パッケージを探す\nCRAN Task View\nBioconductor\n\n\n3.8.2 パッケージをインストールする\ninstall.packages()関数を使用します。以下の例ではggplot2パッケージをインストール指定しています。“dependencies = TRUE”という引数をつけると、依存パッケージも同時にインストールされます。\n\ninstall.packages(\"ggplot2\", dependencies = TRUE)\n\nRStudioでしたら、メニューの Tools &gt; Install Packages… からインストールすることもできます。\n\n\n3.8.3 パッケージを使う\nlibrary()関数でパッケージを読み込みます。下の例ではggplot2パッケージを読み込んでいます。ggplot2パッケージは、統一された文法でグラフを作成できるパッケージです。\n\nlibrary(ggplot2)\n\nこれによりggplot2パッケージの関数が使えるようになります。以下ではggplot2を用いて散布図を描画しています。\n\nggplot(data.frame(x = 1:10, y = (1:10) * 0.5),\n       aes(x, y)) +\n  geom_point()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Rの基本操作</span>"
    ]
  }
]